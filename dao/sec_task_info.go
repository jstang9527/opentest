package dao

import (
	"time"

	"github.com/jstang9527/gateway/dto"

	"github.com/e421083458/gorm"
	"github.com/gin-gonic/gin"
	"github.com/jstang9527/gateway/public"
)

// SecTaskInfo 安全审计任务信息
type SecTaskInfo struct {
	ID          int64     `json:"id" gorm:"primary_key"`
	TaskName    string    `json:"task_name" gorm:"column:task_name" description:"任务名"`
	TaskMD5     string    `json:"task_md5" gorm:"column:task_md5" description:"任务MD5"`
	TaskTargets string    `json:"task_targets" gorm:"column:task_targets" description:"任务目标"`
	OpenWeb     int8      `json:"open_web" gorm:"column:open_web" description:"开启web检测"`
	ScanType    int8      `json:"scan_type" gorm:"column:scan_type" description:"扫描类型"`
	OpenPoc     int8      `json:"open_poc" gorm:"column:open_poc" description:"开启Poc检测"`
	Protocol    string    `json:"protocol" gorm:"column:protocol" description:"协议"`
	OpenExp     int8      `json:"open_exp" gorm:"column:open_exp" description:"开启漏洞利用"`
	TaskStatus  int8      `json:"task_status" gorm:"column:task_status" description:"任务状态"`
	TaskResult  int8      `json:"task_result" gorm:"column:task_result" description:"检测结果"`
	CreatedAt   time.Time `json:"create_at" gorm:"column:create_at" description:"添加时间"`
	UpdatedAt   time.Time `json:"update_at" gorm:"column:update_at" description:"更新时间"`
	IsDelete    int8      `json:"is_delete" gorm:"column:is_delete" description:"是否已删除；0：否；1：是"`
}

// TableName 表名
func (s *SecTaskInfo) TableName() string {
	return "sec_task"
}

// Find 查服务host_info
func (s *SecTaskInfo) Find(c *gin.Context, tx *gorm.DB, search *SecTaskInfo) (*SecTaskInfo, error) {
	out := &SecTaskInfo{}
	err := tx.SetCtx(public.GetGinTraceContext(c)).Where(search).Find(out).Error
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Save 数据库表修改
func (s *SecTaskInfo) Save(c *gin.Context, tx *gorm.DB) error {
	return tx.SetCtx(public.GetGinTraceContext(c)).Save(s).Error
}

// PageList 分页查询=>得服务数组
func (s *SecTaskInfo) PageList(c *gin.Context, tx *gorm.DB, search *dto.SecTaskListInput) ([]SecTaskInfo, int64, error) {
	var total int64 = 0
	list := []SecTaskInfo{}
	offset := (search.PageNo - 1) * search.PageSize //第一页的话就不用偏移了,直接limit查
	query := tx.SetCtx(public.GetGinTraceContext(c))
	query = query.Table(s.TableName()).Where("is_delete=0")
	query = query.Table(s.TableName())
	if search.Info != "" { ///模糊查询
		query = query.Where("task_name like ?", "%"+search.Info+"%")
	}
	if err := query.Limit(search.PageSize).Offset(offset).Order("task_result desc").Find(&list).Error; err != nil && err != gorm.ErrRecordNotFound {
		return nil, 0, err
	}
	query.Limit(search.PageSize).Offset(offset).Count(&total)
	return list, total, nil
}
