package service

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/jstang9527/opentest/utils/dbdao"
)

type detailResponse struct {
	Code int //必须大写,因为要传给json序列化
	Msg  string
	Data []*dbdao.TestResultDB
}

type detailResponseRow struct {
	Code int
	Msg  string
	Data *dbdao.TestResultDB
}

// ProjectDetail ...
func ProjectDetail(w http.ResponseWriter, r *http.Request) {
	method := r.Method
	switch method {
	case "GET":
		// fmt.Println("get", method)
		getDetail(w, r)
	case "POST":
		fmt.Println("Post", method)
	case "PUT":
		fmt.Println("Put", method)
	case "DELETE":
		fmt.Println("Delete", method)
	default:
		fmt.Println("Unkhown", method)
	}
}

func getDetail(w http.ResponseWriter, r *http.Request) {
	// r.URL.Query()["id"]
	// temMap := make(map[string]interface{})
	var responseData []byte
	id := r.URL.Query().Get("id")
	if id == "" { //不给ID查全部
		sql := `select * from project_detail`
		if dts, err := dbdao.QueryManyRowDetail(sql); err != nil {
			dt := detailResponse{
				Code: http.StatusServiceUnavailable,
				Msg:  fmt.Sprint(err),
			}
			responseData, _ = json.Marshal(dt)
		} else {
			dt := detailResponse{
				Code: http.StatusOK,
				Msg:  "success",
				Data: dts,
			}
			responseData, _ = json.Marshal(dt)
		}
	} else { //查测试任务的全部item
		sql := fmt.Sprintf(`select * from project_detail where pid ="%v"`, id)
		if d, err := dbdao.QueryManyRowDetail(sql); err != nil {
			ret := detailResponseRow{
				Code: http.StatusServiceUnavailable,
				Msg:  fmt.Sprint(err),
			}
			responseData, _ = json.Marshal(ret)
		} else {
			ret := detailResponse{
				Code: http.StatusOK, //必须大写,因为要传给json序列化
				Msg:  "success",
				Data: d,
			}
			responseData, _ = json.Marshal(ret)
		}
	}
	w.Write(responseData)
}
