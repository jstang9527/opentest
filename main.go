package main

import (
	"fmt"
	"net"

	"github.com/gin-gonic/gin"
	"github.com/jstang9527/opentest/model"
	"github.com/jstang9527/opentest/thirdpart/es"
	"github.com/jstang9527/opentest/thirdpart/mqemu"
	"github.com/jstang9527/opentest/thirdpart/selenium"
	"github.com/jstang9527/opentest/views"

	"github.com/jstang9527/opentest/utils/dbdao"

	"github.com/jstang9527/opentest/conf"
	"github.com/jstang9527/opentest/ops"
)

var cfg = new(conf.AppCfg)
var domainName = "node"
var qemuConn net.Conn

func main() {
	//-------------------------------------------------0.加载配置文件--------------------------------------------------------
	if err := conf.Init(cfg); err != nil {
		ops.Console("failed to laod ini, err: %v", err)
		return
	}

	//------------------------------------------------1.创建QEMU客户端-------------------------------------------------------
	if err := mqemu.Init(cfg.QemuCfg.Network, cfg.QemuCfg.Address, cfg.QemuCfg.TimeOut); err != nil {
		ops.Console("failed to connect to hypervisor: %v", err)
		return
	}

	//-----------------------------------------------2.虚拟机启停(快照)------------------------------------------------------
	// myVM := expect.VM{Domain: "node"}
	// if err := myVM.Start(); err != nil {
	// 	ops.Console("failed start vm, err: %v", err)
	// 	return
	// }

	//-----------------------------------------------3.初始化一个Chrome Driver后台服务----------------------------------------
	if err := selenium.Init(); err != nil {
		ops.Console("Error starting the ChromeDriver server: %v", err)
		return
	}

	//-----------------------------------------------4.创建数据库连接池-------------------------------------------------------
	if err := dbdao.InitDB(cfg.MysqlCfg.UserName, cfg.MysqlCfg.Password, cfg.MysqlCfg.Address); err != nil {
		ops.Console("failed to create mysqldb pool, err: %v", err)
		return
	}

	//-----------------------------------------------5.创建es连接池----------------------------------------------------------
	if err := es.InitES(cfg.ESCfg.Host, cfg.ESCfg.Index, cfg.ESCfg.Port, cfg.ESCfg.ChanSize, cfg.ESCfg.Nums); err != nil {
		ops.Console("failed to create es pool, err: %v", err)
	}

	//-----------------------------------------------6.基础环境功能测试-------------------------------------------------------
	// testProjectInserDB()
	// testDetilInsertDB()
	// testSelenium()
	// testVM()
	// time.Sleep(time.Second * 900)
	// return

	//------------------------------------------------7.启动Web服务----------------------------------------------------------
	// ops.Console("listen api server :8080")
	// http.HandleFunc("/", urls.Urls) //只处理主根下的所有
	// http.ListenAndServe(":8080", nil)

	//------------------------------------------------8.Gin Web框架----------------------------------------------------------
	//8.1 初始化路由
	r := gin.Default()
	//8.2 加载模板文件
	r.LoadHTMLGlob("views/frontend/templates/*")
	//8.3 处理404路由
	r.NoRoute(views.NoRouteFunc)
	//8.4 接口调用(给jenkins的)
	APIGroup := r.Group("/api/v1.0")
	{
		APIGroup.GET("/index", views.APIRouteFunc)
	}
	//8.5 自带管理界面
	InGroup := r.Group("/")
	{
		//首页,快照管理,行为链管理,截图检索
		InGroup.GET("/", views.IndexFunc)
	}
	//8.6 行为链文件管理详情页
	fileGroup := r.Group("/file")
	{
		fileGroup.POST("", views.UploadFileFunc)    //上传行为链
		fileGroup.GET("/delete", views.DelFileFunc) //删除行为链
	}
	//8.7 快照管理
	vmGroup := r.Group("/vm")
	{
		vmGroup.GET("/start", views.StartSnapshot) //启动并重置快照，?domain=acs_centos_env
		vmGroup.GET("/down", views.DownSnapshot)
	}

	r.Run(":8999")
}

// + 测试selenium工作是否正常
func testSelenium() {
	selenium.ParseStart("acs_v1.8", "github.com/jstang9527/acs", "172.31.50.156", "acschain.json") //从url参数解析出产品名、项目地址、目的地址
}

// + 产品item插入测试.
func testProjectInserDB() {
	pp := model.Project{ProjectID: "654321", ProjectName: "opentest", ProjectAddr: "github.com/jstang9527/opentest"}
	if err := dbdao.InsertRowProject(&pp); err != nil {
		ops.Console("failed insert data, err: %v", err)
		return
	}
}

// + 功能性测试结果item插入测试.
func testDetilInsertDB() {
	tt := model.Function{ProjectID: "654321", Name: "network", Message: "failed", Screenshot: "/resources/xxx.png", Priority: 1, Status: 1, Duration: 8000}
	if err := dbdao.InsertRowDetail(&tt); err != nil {
		ops.Console("failed insert data, err: %v", err)
		return
	}
}

// + 测试vm列表
func testVM() {
	data, err := mqemu.GetDomainList()
	if err != nil {
		fmt.Println("eaeaeae", err)
	}
	fmt.Println(data)
}
