package dto

import (
	"time"

	"github.com/gin-gonic/gin"
	"github.com/jstang9527/gateway/public"
)

// TaskDetailInput ...
type TaskDetailInput struct {
	ID int64 `json:"id" form:"id" comment:"审计任务ID" validate:"required"`
}

// GetValidParams ...
func (params *TaskDetailInput) GetValidParams(c *gin.Context) error {
	return public.DefaultGetValidParams(c, params)
}

// TaskReportInput ...
type TaskReportInput struct {
	PID int64 `json:"pid" form:"pid" comment:"检测报告ID" validate:"required"`
}

// GetValidParams ...
func (params *TaskReportInput) GetValidParams(c *gin.Context) error {
	return public.DefaultGetValidParams(c, params)
}

// SecTaskListInput 任务分页查询
type SecTaskListInput struct {
	Info     string `json:"info" form:"info" comment:"关键词" example:"" validate:""`                      //关键词
	PageNo   int    `json:"page_no" form:"page_no" comment:"页数" example:"1" validate:"required"`        //页数
	PageSize int    `json:"page_size" form:"page_size" comment:"每页条数" example:"20" validate:"required"` // 每页条数
}

// SecTaskListOutput ...
type SecTaskListOutput struct {
	Total int64                   `json:"total" form:"total" comment:"总数" example:"" validate:""` //总数
	List  []SecTaskListItemOutput `json:"list" form:"list" comment:"列表" example:"" validate:""`   //列表
}

// BindValidParam 校验删除参数,绑定结构体,校验参数
func (s *SecTaskListInput) BindValidParam(c *gin.Context) error {
	return public.DefaultGetValidParams(c, s)
}

// SecTaskListItemOutput 域item信息
type SecTaskListItemOutput struct {
	ID          int64     `json:"id" form:"id"`                                         //id
	TaskName    string    `json:"task_name" form:"task_name"`                           //任务名
	TaskTargets []string  `json:"task_targets" form:"task_targets"`                     //任务目标
	TaskStatus  int8      `json:"task_status" form:"task_status"`                       //任务状态
	TaskResult  int8      `json:"task_result" form:"task_result"`                       //检测结果
	UpdatedAt   time.Time `json:"update_at" gorm:"column:update_at" description:"更新时间"` //更新时间
}

// AddSecTaskInput ...
type AddSecTaskInput struct {
	TaskName    string   `json:"task_name" form:"task_name" comment:"任务名" validate:"required"`
	TaskTargets string   `json:"target_list" form:"target_list" comment:"任务目标" validate:"required"`
	OpenWeb     int8     `json:"open_web" form:"open_web" comment:"开启web漏洞检测" validate:""`
	OpenPoc     int8     `json:"open_poc" form:"open_poc" comment:"开启Poc检测" validate:""`
	OpenExp     int8     `json:"open_exp" form:"open_exp" comment:"开启漏洞利用" validate:""`
	ScanType    int8     `json:"scan_type" form:"scan_type" comment:"扫描类型" validate:""`
	Protocol    []string `json:"protocol" form:"protocol" comment:"协议种类" validate:""`
}

// UpdateSecTaskInput ...
type UpdateSecTaskInput struct {
	ID          int64    `json:"id" form:"id" comment:"任务ID" validate:"required"`
	TaskName    string   `json:"task_name" form:"task_name" comment:"任务名" validate:"required"`
	TaskTargets string   `json:"target_list" form:"target_list" comment:"任务目标" validate:"required"`
	OpenWeb     int8     `json:"open_web" form:"open_web" comment:"开启web漏洞检测" validate:""`
	OpenPoc     int8     `json:"open_poc" form:"open_poc" comment:"开启Poc检测" validate:""`
	OpenExp     int8     `json:"open_exp" form:"open_exp" comment:"开启漏洞利用" validate:""`
	ScanType    int8     `json:"scan_type" form:"scan_type" comment:"扫描类型" validate:""`
	Protocol    []string `json:"protocol" form:"protocol" comment:"协议种类" validate:""`
}

// GetValidParams ...
func (params *AddSecTaskInput) GetValidParams(c *gin.Context) error {
	return public.DefaultGetValidParams(c, params)
}

// GetValidParams ...
func (params *UpdateSecTaskInput) GetValidParams(c *gin.Context) error {
	return public.DefaultGetValidParams(c, params)
}
