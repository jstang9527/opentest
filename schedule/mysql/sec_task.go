package mysql

import (
	"fmt"
	"time"
)

// SecTaskInfo 安全审计任务信息
type SecTaskInfo struct {
	ID          int64     `json:"id" gorm:"primary_key"`
	TaskName    string    `json:"task_name" gorm:"column:task_name" description:"任务名"`
	TaskMD5     string    `json:"task_md5" gorm:"column:task_md5" description:"任务MD5"`
	TaskTargets string    `json:"task_targets" gorm:"column:task_targets" description:"任务目标"`
	OpenWeb     int8      `json:"open_web" gorm:"column:open_web" description:"开启web检测"`
	ScanType    int8      `json:"scan_type" gorm:"column:scan_type" description:"扫描类型"`
	OpenPoc     int8      `json:"open_poc" gorm:"column:open_poc" description:"开启Poc检测"`
	Protocol    string    `json:"protocol" gorm:"column:protocol" description:"协议"`
	OpenExp     int8      `json:"open_exp" gorm:"column:open_exp" description:"开启漏洞利用"`
	TaskStatus  int8      `json:"task_status" gorm:"column:task_status" description:"任务状态"`
	TaskResult  int8      `json:"task_result" gorm:"column:task_result" description:"检测结果"`
	CreatedAt   time.Time `json:"create_at" gorm:"column:create_at" description:"添加时间"`
	UpdatedAt   time.Time `json:"update_at" gorm:"column:update_at" description:"更新时间"`
	IsDelete    int8      `json:"is_delete" gorm:"column:is_delete" description:"是否已删除；0：否；1：是"`
}

// GetSecTask ...
func (task *SecTaskInfo) GetSecTask() (item SecTaskInfo, err error) {
	tx := db.Model(&task).Table("sec_task").Where("task_status <2 and is_delete = 0")
	err = tx.Order("task_status desc").First(&item).Error
	return
}

// PutSecTask ...
func (task *SecTaskInfo) PutSecTask(attr ...interface{}) (item SecTaskInfo, err error) {
	// var u = new(SecTaskInfo)
	sql := fmt.Sprintf("id = %v", task.ID)
	tx := db.Model(&task).Table("sec_task").Where(sql)
	if err = tx.Order("task_status desc").First(&item).Error; err != nil {
		return
	}
	err = tx.Model(&item).Update(attr...).Error
	return
}
