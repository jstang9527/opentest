package main

// + 任务调度
// 独立于web应用的数据库连接池

import (
	"log"
	"time"

	"github.com/jstang9527/gateway/schedule/redis"

	"github.com/jstang9527/gateway/schedule/mysql"
)

// scheduleInit 任务调度器初始化
func scheduleInit() (err error) {
	// 1.初始化数据库
	if err = mysql.InitDB(); err != nil {
		return
	}
	// 2.初始化redis
	if err = redis.InitQueue(); err != nil {
		return
	}
	// 监听任务，并执行
	go Watch()
	// info := mysql.SecTaskInfo{ID: 2}
	// xx, _ := info.PutSecTask("is_delete", 1)
	select {}
}

// Watch 监听数据库的任务状态,把未完成的任务给进行调度
func Watch() {
	redis.Done <- true
	for {
		select {
		case <-redis.Done:
			info := mysql.SecTaskInfo{}
			item, err := info.GetSecTask()
			if err == nil { //没有了
				//发给redis
				redis.SendMsqChan(&item)
				time.Sleep(time.Second)
			}
		default:
			time.Sleep(time.Second)
		}
	}
}

// Run ...
func main() {
	if err := scheduleInit(); err != nil {
		log.Printf("Failed open mysql conn, info: %v\n", err)
		return
	}
	defer mysql.DestroyConn()
	// run()

}
