package views

import (
	"fmt"
	"log"
	"net/http"

	"github.com/jstang9527/opentest/ops"

	"github.com/jstang9527/opentest/conf"
	"github.com/jstang9527/opentest/thirdpart/mqemu"

	"github.com/jstang9527/opentest/utils/tools"

	"github.com/jstang9527/opentest/utils"

	"github.com/gin-gonic/gin"
)

// NoRouteFunc 空路由
func NoRouteFunc(c *gin.Context) {
	bd := utils.NewReponse(nil, http.StatusNotFound, "404 not found")
	c.JSON(http.StatusNotFound, bd)
}

// Host 处理返回的
type Host struct {
	Domain string `json:"domain"`
	IP     string `json:"ip"`
	Status string `json:"status"`
	IsRun  bool   `json:"isRun"`
}

// NewHost 处理返回的
func NewHost(domain, status string, isRun bool) *Host {
	return &Host{
		Domain: domain,
		Status: status,
		IsRun:  isRun,
	}
}

// IndexFunc 首页处理
func IndexFunc(c *gin.Context) {
	//获取行为链文件
	files, _ := tools.GetChainFile()
	//获取快照对象列表
	hostsObj, _ := mqemu.GetDomainList()
	//获取快照状态
	var allHost []Host
	var isRun bool
	for _, item := range hostsObj {
		isRun = false
		status, err := item.IsRunning()
		if err != nil {
			ops.Console("获取快照状态: err: %v", err)
		}
		if status == "StatusRunning" {
			isRun = true
		}
		host := NewHost(item.Domain, status, isRun)
		allHost = append(allHost, *host)
	}
	c.HTML(http.StatusOK, "index.html", map[string]interface{}{
		"files": files,
		"hosts": allHost,
	})
}

// APIRouteFunc 对外提供REST API
func APIRouteFunc(c *gin.Context) {

}

// UploadFileFunc 上传行为链文件
func UploadFileFunc(c *gin.Context) {
	form, _ := c.MultipartForm()
	files := form.File["files"]
	var filenames string
	var index int
	for _, file := range files {
		log.Println(file.Filename)
		dst := fmt.Sprintf("%vdata/%v", conf.RESOURCES, file.Filename)
		c.SaveUploadedFile(file, dst)
		index++
		filenames = fmt.Sprintf("%v %v", filenames, file.Filename)
	}
	var data struct {
		FileName  string `json:"filename"`
		Operation string `json:"operation"`
	}
	data.FileName = filenames
	data.Operation = fmt.Sprintf("upload %d files success", index)
	bd := utils.NewReponse(data, http.StatusOK, "success")
	c.JSON(http.StatusOK, bd)
}

// DelFileFunc 删除行为链文件
func DelFileFunc(c *gin.Context) {
	filename := c.Query("filename")
	if err := tools.DelChainFile(filename); err != nil {
		bd := utils.NewReponse(nil, http.StatusInternalServerError, "删除文件出错")
		c.JSON(http.StatusInternalServerError, bd)
		return
	}
	var data struct {
		FileName  string `json:"filename"`
		Operation string `json:"operation"`
	}
	data.FileName = filename
	data.Operation = "delete success"
	bd := utils.NewReponse(data, http.StatusOK, "success")
	c.JSON(http.StatusOK, bd)
}

// StartSnapshot 开启快照
func StartSnapshot(c *gin.Context) {
	//1.获取uri参数
	domain := c.Query("domain")
	obj := mqemu.NewVM(domain)
	var message = "success"
	var code = http.StatusOK
	if err := obj.Start(); err != nil {
		message = fmt.Sprintf("%v", err)
		code = http.StatusInternalServerError
	}
	bd := utils.NewReponse(nil, code, message)
	c.JSON(code, bd)
}

// DownSnapshot 关闭快照=关闭虚拟机
func DownSnapshot(c *gin.Context) {
	//1.获取uri参数
	domain := c.Query("domain")
	obj := mqemu.NewVM(domain)
	var message = "success"
	var code = http.StatusOK
	if err := obj.ShutDown(); err != nil {
		message = fmt.Sprintf("%v", err)
		code = http.StatusInternalServerError
	}
	bd := utils.NewReponse(nil, code, message)
	c.JSON(code, bd)
}
