package expect

import (
	"fmt"
	"net"
	"time"

	"github.com/ThomasRooney/gexpect"
	"github.com/digitalocean/go-qemu/qemu"
	"github.com/digitalocean/go-qemu/qmp"
	"github.com/jstang9527/opentest/ops"
)

var conn net.Conn

// VM 虚拟机 ...
type VM struct {
	Domain string
}

// Init 创建qemu客户端
func Init(network, address string, timeout time.Duration) (err error) {
	if conn, err = net.DialTimeout(network, address, timeout); err != nil {
		ops.Console("failed to connect to hypervisor: %v", err)
		return
	}
	return
}

func (v *VM) isRunning() (ok bool, err error) { //主机不存在报flase err, 没启动报false nil, 正在运行报 true, nil
	mon := qmp.NewLibvirtRPCMonitor(v.Domain, conn)
	if err = mon.Connect(); err != nil {
		return
	}
	domain, err := qemu.NewDomain(mon, v.Domain)
	if err != nil { //主机不存在
		return
	}
	defer domain.Close()
	if _, err = domain.Status(); err != nil { //这里报错是因为VM没启动
		err = nil
		return
	}
	ok = true
	return
}

// Start 开启虚拟机快照
func (v *VM) Start() (err error) {
	ok, err := v.isRunning()
	//0.主机不存在
	if err != nil {
		return err
	}
	//1.正在运行
	if ok {
		err = fmt.Errorf("%v vm is running, cannot operate snapshot", v.Domain)
		return
	}
	//2.关机态, 不用开启虚拟机, 直接起快照
	bash, err := gexpect.Spawn("sh")
	if err != nil {
		return
	}
	defer bash.Close()

	bash.Expect("sh-4.2#")
	bash.SendLine("virsh snapshot-revert " + v.Domain + " --current")
	bash.Expect("sh-4.2#")
	return
}

// ShutDown 关闭虚拟机 ...
func (v *VM) ShutDown() (err error) {
	ok, err := v.isRunning()
	//0. 主机不存在
	if err != nil {
		return
	}
	//1.主机已关机
	if !ok {
		err = fmt.Errorf("%v vm is poweroff already", v.Domain)
		return
	}
	//.关闭虚拟机
	bash, err := gexpect.Spawn("sh")
	if err != nil {
		return
	}
	defer bash.Close()

	bash.Expect("sh-4.2#")
	bash.SendLine("virsh shutdown " + v.Domain)
	bash.Expect("sh-4.2#")
	return
}
