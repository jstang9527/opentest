package model

import (
	"encoding/json"
	"fmt"
	"time"
)

// Level ...
type Level int

const (
	// Unknown 严重性
	Unknown = iota
	// Pass ...
	Pass
	// Info ...
	Info
	// Warning ...
	Warning
	// Error ...
	Error
	// Fatal ...
	Fatal
)

const (
	// Low 优先级
	Low = iota + 1
	// Nomal ...
	Nomal
	// High ...
	High
)

//Project ...
type Project struct {
	ProjectID   string
	ProjectName string
	ProjectAddr string
	ProjectTime string
	SnapshotIP  string
	TestItem    []*Function //一个项目拥有数个功能项测试结果
}

// Function ...
type Function struct {
	FunclID    int           //测试项id
	ProjectID  string        //隶属项目
	Name       string        //功能名
	Message    string        //测试结果
	Screenshot string        //测试截图url
	Priority   Level         //功能项重要性
	Status     Level         //告警程度
	Duration   time.Duration //测试耗时
	CreateTime string        //产生时间
}

// NewFunction 构造函数
func NewFunction(ProjectID, Name, Message, Screenshot string, Duration time.Duration, Priority, Status Level) *Function {
	return &Function{
		ProjectID:  ProjectID,
		Name:       Name,
		Duration:   Duration,
		Message:    Message,
		Priority:   Priority,
		Status:     Status,
		Screenshot: Screenshot,
	}
}

// NewProject ..
func NewProject(ProjectID, ProjectName, ProjectAddr, ProjectTime string) *Project {
	return &Project{
		ProjectID:   ProjectID,
		ProjectName: ProjectName,
		ProjectAddr: ProjectAddr,
		ProjectTime: ProjectTime,
	}
}

// ToJSON 映射并序列化
func (t *Function) ToJSON() string {
	data, err := json.Marshal(t)
	if err != nil {
		fmt.Println("序列化成json出错, err:", err)
		return ""
	}
	// fmt.Println(string(data))
	return string(data)
}

// ToJSON ...
func (p *Project) ToJSON() string {
	// obj := NewProject(ProjectID, ProjectName, ProjectAddr, ProjectTime)
	data, err := json.Marshal(p)
	if err != nil {
		fmt.Println("序列化成json出错, err:", err)
		return ""
	}
	// fmt.Println(string(data))
	return string(data)
}
