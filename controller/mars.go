package controller

import (
	"encoding/json"
	"strings"

	"github.com/e421083458/golang_common/lib"
	"github.com/gin-gonic/gin"
	"github.com/jstang9527/gateway/dao"
	"github.com/jstang9527/gateway/dto"
	"github.com/jstang9527/gateway/middleware"
	"github.com/jstang9527/gateway/public"
	"github.com/pkg/errors"
)

// MarsController Mars控制器结构体
type MarsController struct{}

// MarsRegister Mars控制器
func MarsRegister(group *gin.RouterGroup) {
	MarsCtl := &MarsController{}
	group.GET("/task_list", MarsCtl.TaskList)     //记录列表
	group.POST("/task", MarsCtl.AddTask)          //新增记录
	group.PUT("/task", MarsCtl.UpdateTask)        //更新任务
	group.GET("/task_detail", MarsCtl.TaskDetail) //任务详情
	group.GET("/task/report", MarsCtl.TaskReport) //结果报告
}

// TaskList godoc
// @Summary 任务列表
// @Description 任务列表
// @Tags 安全审计
// @ID /mars/task_list
// @Accept json
// @Produce json
// @Param info query string false "关键词"
// @Param page_size query int true "每页个数"
// @Param page_no query int true "当前页数"
// @Success 200 {object} middleware.Response{data=dto.SecTaskListOutput} "success"
// @Router /mars/task_list [get]
func (s *MarsController) TaskList(c *gin.Context) {
	inputParams := &dto.SecTaskListInput{}
	if err := inputParams.BindValidParam(c); err != nil {
		middleware.ResponseError(c, 2000, err)
		return
	}
	tx, err := lib.GetGormPool("default")
	if err != nil {
		middleware.ResponseError(c, 2001, err)
		return
	}
	//从db中分页读取基本信息
	taskInfo := &dao.SecTaskInfo{}
	hostList, total, err := taskInfo.PageList(c, tx, inputParams)
	if err != nil {
		middleware.ResponseError(c, 2002, err)
		return
	}
	//格式化输出信息
	outList := []dto.SecTaskListItemOutput{} //这个结构体是面向前端接口的
	for _, item := range hostList {
		ts := strings.Split(item.TaskTargets, ",")
		outItem := dto.SecTaskListItemOutput{
			ID:          item.ID,
			TaskName:    item.TaskName,
			TaskTargets: ts,
			TaskStatus:  item.TaskStatus,
			TaskResult:  item.TaskResult,
		}
		outList = append(outList, outItem)
	}
	out := &dto.SecTaskListOutput{Total: total, List: outList}
	middleware.ResponseSuccess(c, out)
}

// TaskDetail godoc
// @Summary 任务详情
// @Description 任务详情
// @Tags 安全审计
// @ID /mars/task_detail
// @Accept  json
// @Produce  json
// @Param id query int true "任务ID"
// @Success 200 {object} middleware.Response{data=dto.AddSecTaskInput} "success"
// @Router /mars/task_detail [get]
func (s *MarsController) TaskDetail(c *gin.Context) {
	params := &dto.TaskDetailInput{}
	if err := params.GetValidParams(c); err != nil {
		middleware.ResponseError(c, 2001, err)
		return
	}
	search := &dao.SecTaskInfo{
		ID: params.ID,
	}
	detail, err := search.Find(c, lib.GORMDefaultPool, search)
	if err != nil {
		middleware.ResponseError(c, 2002, err)
		return
	}
	out := dto.AddSecTaskInput{
		TaskName:    detail.TaskName,
		TaskTargets: detail.TaskTargets,
		OpenWeb:     detail.OpenWeb,
		ScanType:    detail.ScanType,
		OpenPoc:     detail.OpenPoc,
		Protocol:    strings.Split(detail.Protocol, ","),
		OpenExp:     detail.OpenExp,
	}
	middleware.ResponseSuccess(c, out)
	return
}

// AddTask godoc
// @Summary 添加任务
// @Description 添加任务
// @Tags 安全审计
// @ID /mars/task_post
// @Accept  json
// @Produce  json
// @Param body body dto.AddSecTaskInput true "body"
// @Success 200 {object} middleware.Response{data=string} "success"
// @Router /mars/task [post]
func (s *MarsController) AddTask(c *gin.Context) {
	params := &dto.AddSecTaskInput{}
	if err := params.GetValidParams(c); err != nil {
		middleware.ResponseError(c, 2001, err)
		return
	}
	tx := lib.GORMDefaultPool

	//验证TaskName是否被占用
	search := &dao.SecTaskInfo{
		TaskName: params.TaskName,
	}
	if _, err := search.Find(c, tx, search); err == nil {
		middleware.ResponseError(c, 2002, errors.New("任务名被占用，请重新输入"))
		return
	}

	info := &dao.SecTaskInfo{
		TaskName:    params.TaskName,
		TaskMD5:     public.MD5(params.TaskName),
		TaskTargets: params.TaskTargets,
		OpenWeb:     params.OpenWeb,
		ScanType:    params.ScanType,
		OpenPoc:     params.OpenPoc,
		Protocol:    strings.Join(params.Protocol, ","),
		OpenExp:     params.OpenExp,
	}
	if err := info.Save(c, tx); err != nil {
		middleware.ResponseError(c, 2003, err)
		return
	}
	middleware.ResponseSuccess(c, "success")
	return
}

// UpdateTask godoc
// @Summary 任务更新
// @Description 任务更新
// @Tags 安全审计
// @ID /mars/task_put
// @Accept  json
// @Produce  json
// @Param body body dto.UpdateSecTaskInput true "body"
// @Success 200 {object} middleware.Response{data=string} "success"
// @Router /mars/task [put]
func (s *MarsController) UpdateTask(c *gin.Context) {
	params := &dto.UpdateSecTaskInput{}
	if err := params.GetValidParams(c); err != nil {
		middleware.ResponseError(c, 2001, err)
		return
	}
	search := &dao.SecTaskInfo{
		ID: params.ID,
	}
	info, err := search.Find(c, lib.GORMDefaultPool, search)
	if err != nil {
		middleware.ResponseError(c, 2002, err)
		return
	}
	info.TaskName = params.TaskName
	info.TaskMD5 = public.MD5(params.TaskName)
	info.TaskTargets = params.TaskTargets
	info.OpenWeb = params.OpenWeb
	info.ScanType = params.ScanType
	info.OpenPoc = params.OpenPoc
	info.Protocol = strings.Join(params.Protocol, ",")
	info.OpenExp = params.OpenExp
	if err := info.Save(c, lib.GORMDefaultPool); err != nil {
		middleware.ResponseError(c, 2003, err)
		return
	}
	middleware.ResponseSuccess(c, "success")
	return
}

// TaskReport godoc
// @Summary 检测结果
// @Description 检测结果
// @Tags 安全审计
// @ID /mars/task/report
// @Accept  json
// @Produce  json
// @Param pid query int true "任务ID"
// @Success 200 {object} middleware.Response{data=string} "success"
// @Router /mars/task/report [get]
func (s *MarsController) TaskReport(c *gin.Context) {
	params := &dto.TaskReportInput{}
	if err := params.GetValidParams(c); err != nil {
		middleware.ResponseError(c, 2001, err)
		return
	}
	search := &dao.NmapReport{
		PID: params.PID,
	}
	detail, err := search.Find(c, lib.GORMDefaultPool, search)
	if err != nil {
		middleware.ResponseError(c, 2002, err)
		return
	}
	// 端口爆破检测结果
	jstr := detail.JSONStr
	out := dto.ReportNmapOutput{}
	json.Unmarshal([]byte(jstr), &out)
	middleware.ResponseSuccess(c, out)
	return
}
