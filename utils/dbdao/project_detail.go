package dbdao

import (
	"fmt"

	"github.com/jstang9527/opentest/ops"

	"github.com/jstang9527/opentest/model"
)

// TestResultDB 接收从数据库查出来的记录
type TestResultDB struct {
	DetailID   int         //测试项id
	ProjectID  string      //隶属项目
	Name       string      //功能名
	Message    string      //测试结果
	Screenshot string      //测试截图url
	Priority   model.Level //功能项重要性
	Status     model.Level //告警程度
	Duration   string      //测试耗时
	CreateTime string      //产生时间
}

// QueryRowDetail 查询单行数据
func QueryRowDetail(sqlStr string) (detail *TestResultDB, err error) {
	var t TestResultDB
	err = db.QueryRow(sqlStr).Scan(&t.DetailID, &t.ProjectID, &t.Name, &t.Message, &t.Screenshot, &t.Priority, &t.Status, &t.Duration, &t.CreateTime) //从连接池拿连接
	if err != nil {                                                                                                                                   //没有该记录
		ops.Console("scan failed, err: %v", err)
		return nil, err
	}
	return &t, nil
}

// QueryManyRowDetail 查询多行数据
func QueryManyRowDetail(sqlStr string) (detail []*TestResultDB, err error) {
	// jsons := make([]string, 0)
	detail = make([]*TestResultDB, 0, 100)
	rows, err := db.Query(sqlStr)
	if err != nil {
		ops.Console("query project_detail recodes failed. err:%v\n", err)
		return nil, err
	}
	defer rows.Close()
	for rows.Next() {
		var t TestResultDB
		// int64, err := strconv.ParseInt(string, 10, 64)
		err = rows.Scan(&t.DetailID, &t.ProjectID, &t.Name, &t.Message, &t.Screenshot, &t.Priority, &t.Status, &t.Duration, &t.CreateTime)
		if err != nil {
			fmt.Printf("scan failed, err:%v\n", err)
			return nil, err
		}
		detail = append(detail, &t)
	}
	return detail, nil
}

// InsertRowDetail 插入一条记录
func InsertRowDetail(item *model.Function) error {
	sql := `insert into function(pid,funcname,message,screenshot,priority_id,status_id,duration) values(?,?,?,?,?,?,?)`
	duration := fmt.Sprintf("%v", item.Duration)
	ret, err := db.Exec(sql, item.ProjectID, item.Name, item.Message, item.Screenshot, item.Priority, item.Status, duration)

	if err != nil {
		ops.Console("insert into Detail table failed, err: %v", err)
		return err
	}
	theFlag, err := ret.RowsAffected() // 新插入数据的id
	if err != nil {
		ops.Console("get RowsAffected failed, err: %v", err)
		return err
	}
	ops.Console("insert into Detail table success, the Affected row %d.", theFlag)
	return nil
}
