package dbdao

import (
	"fmt"

	"github.com/jstang9527/opentest/model"
	"github.com/jstang9527/opentest/ops"
)

// QueryRowProject 查询单条记录
func QueryRowProject(sqlStr string) (project *model.Project, err error) {
	var pro model.Project
	err = db.QueryRow(sqlStr).Scan(&pro.ProjectID, &pro.ProjectName, &pro.ProjectAddr, &pro.ProjectTime, &pro.SnapshotIP) //从连接池拿连接
	if err != nil {                                                                                                       //没有该记录
		fmt.Println("scan failed, err: ", err)
		return nil, err
	}
	return &pro, nil
}

//QueryManyRowProject ...
func QueryManyRowProject(sqlStr string) (project []*model.Project, err error) {
	// jsons = make([]string, 0)
	project = make([]*model.Project, 0, 10)
	rows, err := db.Query(sqlStr)
	if err != nil {
		fmt.Printf("query project recodes failed. err:%v\n", err)
		return nil, err
	}
	defer rows.Close()
	for rows.Next() {
		var pro model.Project
		err = rows.Scan(&pro.ProjectID, &pro.ProjectName, &pro.ProjectAddr, &pro.ProjectTime, &pro.SnapshotIP)
		if err != nil {
			fmt.Printf("scan failed, err:%v\n", err)
			return nil, err
		}
		project = append(project, &pro)
	}
	return project, nil
}

// InsertRowProject 插入一条记录
func InsertRowProject(item *model.Project) error {
	sql := `insert into project(id,name,addr,host) values(?,?,?,?)`
	ret, err := db.Exec(sql, item.ProjectID, item.ProjectName, item.ProjectAddr, item.SnapshotIP)
	if err != nil {
		ops.Console("insert into Project table failed, err: %v", err)
		return err
	}
	theFlag, err := ret.RowsAffected() // 新插入数据的id
	if err != nil {
		ops.Console("get RowsAffected failed, err:%v", err)
		return err
	}
	ops.Console("insert into Project table success, the id is %d.\n", theFlag)
	return nil
}
