package selenium

import (
	"fmt"

	mops "github.com/jstang9527/opentest/ops"
	"github.com/jstang9527/opentest/thirdpart/actionchain"
	"github.com/tebeka/selenium"
)

// createTestTask ...
func createTestTask(name, addr, host string) (testTask *TestTask, err error) {
	//1.加载自定义浏览器配置
	caps.AddChrome(chromeCaps)
	//2.将浏览器挂载到selenium driver上, 调用浏览器urlPrefix: 测试参考：DefaultURLPrefix = "http://127.0.0.1:4444/wd/hub"
	wd, err := selenium.NewRemote(caps, "http://127.0.0.1:9515/wd/hub")
	if err != nil {
		err = fmt.Errorf("unable create browser, err: %v", err)
		return
	}
	// err = wd.SetImplicitWaitTimeout(time.Second * 3) // 设定元素检索超时时间
	// if err != nil {
	// 	err = fmt.Errorf("unable set timeout in search element, err: %v", err)
	// 	return
	// }
	//3.实例化任务对象,顺便存数据库了
	return NewTestTask(name, addr, host, wd)
}

// ParseStart 调用测试立即返回任务task_id
func ParseStart(name, addr, host, file string) (string, error) {
	//-------------------------------------------------1.创建测试任务,并注册到web驱动------------------------------------------
	testTask, err := createTestTask(name, addr, host)
	if err != nil {
		mops.Console("unable create testTask object, err: %v", err)
		return "", nil
	}
	//-------------------------------------------------2.文件生成行为链对象----------------------------------------------------
	var ActionChain []actionchain.ActionChain
	filepath := fmt.Sprintf("./resources/data/%v", file)
	if err = actionchain.Init(filepath, &ActionChain); err != nil {
		fmt.Println(err)
		return "", err
	}
	fmt.Println("<----ok")
	//-------------------------------------------------3.执行动作行为链(异步)--------------------------------------------------
	go testTask.executeActionChain(&ActionChain)
	//-------------------------------------------------4.返回结果给调用者------------------------------------------------------
	return testTask.Project.ProjectID, nil
}
