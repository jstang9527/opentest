package nmap

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/jstang9527/gateway/schedule/mysql"

	"github.com/Ullaakut/nmap"
)

// ReportNmap ...
type ReportNmap struct {
	TaskID   string `json:"task_id"`
	PID      int64  `json:"pid"`
	Duration string `json:"duration"`
	Targets  string `json:"targets"`
	Hosts    []Host `json:"hosts"`
	ErrMsg   string `json:"err_msg"`
}

// Host ...
type Host struct {
	Target   string    `json:"target"`
	AddrType string    `json:"addr_type"`
	Services []Service `json:"services"`
}

// Service ...
type Service struct {
	Port      uint16  `json:"port"`
	Protocol  string  `json:"protocol"`
	Name      string  `json:"name"`
	State     string  `json:"state"`
	Reason    string  `json:"reason"`
	ReasonTTL float32 `json:"reason_ttl"`
}

// Nmapscan ...
func (rn *ReportNmap) Nmapscan() {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Minute)
	defer cancel()
	defer rn.output()
	list := strings.Split(rn.Targets, ",")
	scanner, err := nmap.NewScanner(
		// nmap.WithTargets("zan71.com", "172.31.50.156", "172.31.50.254"),
		nmap.WithTargets(list...),
		// nmap.WithPorts("80,443,843"),
		nmap.WithContext(ctx),
	)

	if err != nil {
		rn.ErrMsg = fmt.Sprintf("unable to create nmap scanner: %v", err)
		return
	}

	result, warnings, err := scanner.Run()
	if err != nil {
		rn.ErrMsg = fmt.Sprintf("unable to run nmap scan: %v", err)
		return
	}

	if warnings != nil {
		rn.ErrMsg = fmt.Sprintf("Warnings: \n %v", warnings)
	}

	// Use the results to print an example output
	for _, host := range result.Hosts {
		if len(host.Ports) == 0 || len(host.Addresses) == 0 {
			continue
		}
		h := Host{Target: host.Addresses[0].Addr, AddrType: host.Addresses[0].AddrType}

		for _, port := range host.Ports {
			srv := Service{
				Port:      port.ID,
				Protocol:  port.Protocol,
				State:     port.State.String(),
				Name:      port.Service.Name,
				Reason:    port.State.Reason,
				ReasonTTL: port.State.ReasonTTL,
			}
			h.Services = append(h.Services, srv)
		}
		rn.Hosts = append(rn.Hosts, h)
	}
	rn.Duration = fmt.Sprintf("%3f", result.Stats.Finished.Elapsed)
}

// 扫描完的操作
func (rn *ReportNmap) output() {
	//1.保存报告到数据库
	b, _ := json.Marshal(rn)
	record := mysql.NmapReport{
		TaskID:  rn.TaskID,
		PID:     rn.PID,
		JSONStr: fmt.Sprintf("%s", b),
	}

	if err := record.Save(); err != nil {
		fmt.Println("failed save nmap report, info: ", err)
	}
	//2.修改数据库对应任务status字段
	info := mysql.SecTaskInfo{ID: rn.PID}
	if _, err := info.PutSecTask("task_status", 2); err != nil { //2 ->finished
		fmt.Println("failed update task status, info, ", err)
	}
	fmt.Println("finished output nmap by ", rn.PID)
}
