package thirdpart

import (
	"fmt"
	"time"

	mops "github.com/jstang9527/opentest/ops"

	"github.com/jstang9527/opentest/model"
	"github.com/jstang9527/opentest/utils/tools"
	"github.com/tebeka/selenium"
)

/* + 虚拟蜜罐创建
   + 虚拟蜜罐关机
   + 虚拟蜜罐开机
   + 虚拟蜜罐删除
*/

// 创建虚拟蜜罐
func (t *TestTask) createVM() {
	fmt.Println("-----> enyter")
	name := "create honeypot"
	message := "success"
	var priority model.Level = model.High
	var status model.Level = model.Error
	start := time.Now()

	//1.找到蜜罐管理buttom
	sysBtn, err := t.Wd.FindElement(selenium.ByXPATH, `//*[@id="root"]/div/nav/ul/li[7]`)
	if err != nil {
		message = fmt.Sprintln("honeypot mgr buttom not found in home page.", err)
		screenshot := tools.CreateMd5(message) //截图名
		t.createItem(name, message, screenshot, priority, status, time.Now().Sub(start))
		return
	}
	//2.点击蜜罐管理buttom
	sysBtn.Click()

	//3.找子项=>虚拟蜜罐管理
	vmMgrBtn, err := t.Wd.FindElement(selenium.ByXPATH, `//*[@id="/manager$Menu"]/li[2]`)
	if err != nil {
		message = fmt.Sprintln("honeypot mgr buttom not found in home page.", err)
		screenshot := tools.CreateMd5(message) //截图名
		t.createItem(name, message, screenshot, priority, status, time.Now().Sub(start))
		return
	}
	//4.点击蜜罐管理buttom
	vmMgrBtn.Click()

	//获取页面数据，查看数据是否加载
	for i := 0; i < 10; i++ {
		if content, err := t.Wd.FindElement(selenium.ByXPATH, `//*[@id="root"]/div/div/div[2]/div/div[3]/div[1]/div[2]/div[2]/div[1]/button/span`); err != nil {
			mops.Console("try get data with time %d", i)
			time.Sleep(time.Millisecond * 200)
			continue
		} else if c, _ := content.Text(); c != "" {
			message = c
			break
		}
		if i == 9 {
			message := fmt.Sprintln("unable load user page data More than 10.")
			screenshot := tools.CreateMd5(message) //截图名
			t.createItem(name, message, screenshot, priority, status, time.Now().Sub(start))
			return
		}
	}
	now := time.Now()
	screenshot := tools.CreateMd5(name + start.String() + now.String() + message) //截图名
	t.createItem(name, message, screenshot, priority, model.Pass, time.Now().Sub(start))

}

// 虚拟蜜罐关机
func (t *TestTask) shutdownVM() {

}

// 虚拟蜜罐开机
func (t *TestTask) startVM() {

}

// 删除虚拟蜜罐
func (t *TestTask) deleteVM() {

}
