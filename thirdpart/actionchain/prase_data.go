package actionchain

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
)

// Action 单个动作
type Action struct {
	ActionName string `json:"actionName"` // 动作名 openLoginPage、inputUserName
	EleType    string `json:"eleType"`    // "eletype": "entry|input|click|monitor",
	EleID      string `json:"id"`         // "id": "", 首检id,次从xpath
	EleXpath   string `json:"xpath"`      // "xpath": "",
	ScopeURI   string `json:"url"`        // "url":"/#/overview" 动作起始点
	Value      string `json:"value"`      // 输入框的值
	Duration   int64  `json:"duration"`   // 检索指标超时时间
	AllowErr   bool   `json:"allowErr"`   // 何谓之允许错误？执行了某些操作后，某些信息不可被elefind才算是正确
}

// ActionChain 行为链
type ActionChain struct {
	FuncName   string   `json:"funcName"`
	Priority   int      `json:"priority"`
	ActionList []Action `json:"actionChain"` // 因为不涉及对链中的属性更改,无需传地址
	Expect     string   `json:"expect"`      // 一条链完成后的用户指定预期值
}

// Init ...
func Init(filename string, actionChain *[]ActionChain) (err error) {
	// content, err := ioutil.ReadFile("./acschain.json")
	content, err := ioutil.ReadFile(filename)
	if err != nil {
		err = fmt.Errorf("read %s file failed, err: %v", filename, err)
		return
	}
	err = json.Unmarshal(content, &actionChain)
	return
}
