package msploit

import "fmt"

// AuthReq ...
type AuthReq struct {
	_msgpack struct{} `msgpack:",asArray"`
	Method   string
	Token    string
	// ConsoleID string `msgpack:"omitempty"`
	// Command   string `msgpack:"omitempty"`
}

// CreateResp ...
type CreateResp struct {
	ID       string `msgpack:"id"`
	Prompt   string `msgpack:"prompt"`
	Busy     bool   `msgpack:"busy"`
	ErrorMsg string `msgpack:"errormsg"`
}

// CreateConsole 分配控制台
func (msf *Metasploit) CreateConsole() (res CreateResp, err error) {
	ctx := &AuthReq{
		Method: "console.create",
		Token:  msf.token,
	}

	if err := msf.send(ctx, &res); err != nil {
		fmt.Println("Failed to get CreateConsole.")
		return res, err
	}
	// fmt.Printf("%#v\n", res)
	return
}

// ConsoleList 控制台列表
// return::: []interface {}{
//		map[string]interface {}{
//			"busy":false, "id":"1", "prompt":[]uint8{0x6d, 0x73, 0x66, 0x36, 0x20, 0x3e, 0x20}
//		},
//		map[string]interface {}{
// 			"busy":false, "id":"2", "prompt":[]uint8{0x6d, 0x73, 0x66, 0x36, 0x20, 0x3e, 0x20}
//		}
//	}
func (msf *Metasploit) ConsoleList() (res []interface{}, err error) {
	ctx := &AuthReq{
		Method: "console.list",
		Token:  msf.token,
	}
	data, err := msf.send2(ctx)
	// fmt.Println("获取send2的Map data: ", data)
	// interface转map
	var tempM map[string]interface{} = data.(map[string]interface{})
	v, ok := tempM["consoles"]
	if !ok {
		return res, fmt.Errorf("Unable Get Map[console] from RPC")
	}
	res = v.([]interface{})
	return res, err
}

// WriteReq ...
type WriteReq struct {
	_msgpack  struct{} `msgpack:",asArray"`
	Method    string
	Token     string
	ConsoleID string
	Command   string
}

// ConsoleWrite ...
func (msf *Metasploit) ConsoleWrite(consoleID, command string) (res map[string]interface{}, err error) {
	var ctx WriteReq
	ctx.Method = "console.write"
	ctx.Token = msf.token
	ctx.ConsoleID = consoleID
	ctx.Command = command
	data, err := msf.send2(&ctx)
	res = data.(map[string]interface{})
	return res, err
}

// ReadReq ...
type ReadReq struct {
	_msgpack  struct{} `msgpack:",asArray"`
	Method    string
	Token     string
	ConsoleID string
}

// ConsoleRead ...
func (msf *Metasploit) ConsoleRead(consoleID string) (res map[string]interface{}, err error) {
	ctx := &ReadReq{
		Method:    "console.read",
		Token:     msf.token,
		ConsoleID: consoleID,
	}
	data, err := msf.send2(&ctx)
	// fmt.Printf("//////////%#v\n", data)
	res = data.(map[string]interface{})
	return
}

//
