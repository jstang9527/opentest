package msploit

import (
	"fmt"
	"strings"
	"time"
)

// ReportPoc ...
type ReportPoc struct {
	TaskID  string `json:"task_id"`
	PID     int64  `json:"pid"`
	Targets string `json:"targets"`
	// Hosts   []Host `json:"hosts"`
	ErrMsg   string `json:"err_msg"`
	Protocol string `json:"protocol"`
	Msf      *Metasploit
}

// PocScan ...
func (pr *ReportPoc) PocScan() {
	defer pr.output()
	var err error
	pr.Msf, err = NewMsf()
	if err != nil {
		pr.ErrMsg = fmt.Sprintf("Failed to create msf rpc client, info:%v", err)
		fmt.Println("Failed to create msf rpc client, info", err)
		return
	}
	defer pr.Msf.Logout()
	//1.先确定目标数组
	targets := strings.Split(pr.Targets, ",")
	for _, item := range targets {
		//2.查询控制台
		ids, err := pr.getConsoleList()
		if err != nil {
			pr.ErrMsg = fmt.Sprintf("Failed get console list, info: %v", err)
			fmt.Println("Failed get console list, info: ", err)
			return
		}
		//3.用控制台执行操作
		pr.execute(item, ids[0])
	}
}

func (pr *ReportPoc) execute(target, console_id string) {
	ptcs := strings.Split(pr.Protocol, ",")
	for _, ptc := range ptcs {
		fmt.Println(console_id, ptc)

		_, err := pr.Msf.ConsoleWrite(console_id, fmt.Sprintf("search %v\n", ptc))
		// _, err := pr.Msf.ConsoleWrite(console_id, "search bluekeep\n")
		if err != nil {
			pr.ErrMsg = fmt.Sprintf("Failed to ConsoleWrite Command, info: %v", err)
			fmt.Println("Failed to ConsoleWrite Command, info: ", err)
			return
		}
		time.Sleep(time.Second)
		pr.lockOutput(console_id)
	}
	select {}
}

// 阻塞输出信息到终端
func (pr *ReportPoc) lockOutput(id string) {
	fmt.Println("等待消息")
	var data string // 输出的data不为空再输出
	for i := 0; i < 10; i++ {
		resp, err := pr.Msf.ConsoleRead(id)
		if err != nil {
			fmt.Println(err)
			time.Sleep(time.Second)
			continue
		}

		data = fmt.Sprintf("++++++++++++++\n%s\n++++++++++\n", resp["data"])
		if data != "" {
			fmt.Printf("%#v\n", data)
			break
		}
		time.Sleep(time.Second)
	}
}

// + 获取终端列表
func (pr *ReportPoc) getConsoleList() (ids []string, err error) {
	resp, err := pr.Msf.ConsoleList()
	if err != nil {
		return
	}
	for _, i := range resp {
		cc := i.(map[string]interface{})
		fmt.Printf("{'id': '%v', 'busy': '%v', 'prompt': '%s'}\n", cc["id"], cc["busy"], cc["prompt"])
		cid := cc["id"].(string)
		busy := cc["busy"].(bool)
		// consoleT[cid] = cc["prompt"]
		if !busy {
			ids = append(ids, cid)
		}
	}
	return
}
func (pr *ReportPoc) output() {

}
