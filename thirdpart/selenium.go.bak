package thirdpart

import (
	"fmt"
	"time"

	"github.com/jstang9527/opentest/model"
	mops "github.com/jstang9527/opentest/ops"

	"github.com/jstang9527/opentest/utils/dbdao"
	"github.com/jstang9527/opentest/utils/tools"
	"github.com/tebeka/selenium"
	"github.com/tebeka/selenium/chrome"
)

const (
	//设置常量 分别设置chromedriver.exe的地址和本地调用端口
	seleniumPath = `/root/chromedriver`
	port         = 9515
)

var (
	chromeCaps = chrome.Capabilities{
		// Prefs: imgCaps,
		Path: "",
		Args: []string{
			"--headless",
			"--start-maximized",
			"--window-size=1920x1080",
			"--no-sandbox",
			"--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36",
			"--disable-gpu",
			"--disable-impl-side-painting",
			"--disable-gpu-sandbox",
			"--disable-accelerated-2d-canvas",
			"--disable-accelerated-jpeg-decoding",
			"--test-type=ui",
			"--ignore-certificate-errors",
		},
	}
	//设置selenium服务的选项,设置为空。根据需要设置。
	ops = []selenium.ServiceOption{}
)

// TestTask 测试任务结构体
type TestTask struct {
	ProjectName *model.Project
	Service     *selenium.Service
	Wd          *selenium.WebDriver
}

// NewTestTask 实例化 测试任务结构体 ...
func NewTestTask(name, addr, host string) *TestTask {
	return &TestTask{}
}

// Init 初始化一个service后台服务
func Init() (err error) {
	return
}

//ServiceStart ...
func ServiceStart(name, addr, host string) {
	taskObj := model.Project{ProjectName: name, ProjectAddr: addr, SnapshotIP: host}
	//1.开启selenium服务
	service, err := selenium.NewChromeDriverService(seleniumPath, port, ops...)
	if err != nil {
		mops.Console("Error starting the ChromeDriver server: %v", err)
		return
	}
	defer service.Stop()

	//2.调用浏览器
	//设置浏览器兼容性，设置浏览器名称为chrome
	caps := selenium.Capabilities{"browserName": "chrome"}
	caps.AddChrome(chromeCaps)

	//调用浏览器urlPrefix: 测试参考：DefaultURLPrefix = "http://127.0.0.1:4444/wd/hub"
	wd, err := selenium.NewRemote(caps, "http://127.0.0.1:9515/wd/hub")
	if err != nil {
		mops.Console("can't not create browser, err: %v", err)
		return
	}
	//延迟退出chrome
	defer wd.Quit()
	defer wd.Close()

	//3.开始测试
	if err := wd.Get(fmt.Sprintf("https://%v/", host)); err != nil {
		mops.Console("can't open ACS index, err: %v", err)
		return
	}
	// 设定元素检索超时时间
	err = wd.SetImplicitWaitTimeout(time.Second * 60)
	if err != nil {
		mops.Console("find element timeout, err: %v", err)
		return
	}

	//创建一条项目执行记录
	pid := tools.CreateMd5(name + addr + time.Now().Local().String())
	if err := dbdao.InsertRowProject(&taskObj); err != nil {
		mops.Console("can't not create project recode in DB, err: %v", err)
		return
	}

	time.Sleep(time.Second * 3) //要完全打开才能进行测试
	//执行首页登录进去
	if err := checkLogin(pid, wd); err != nil {
		mops.Console("Login failed, This task is no longer meaningful, stop task on this... Info: %v", err)
		return
	}

	//等登录进去拿到cookie和token后,进行并发执行剩余项测试
	checkNetConf(pid, wd)
	//执行剩余功能项

	// //展示测试结果
	// window, _ := wd.CurrentWindowHandle()
	// if err := wd.MaximizeWindow(window); err != nil {
	// 	fmt.Println(err)
	// }
	// wd.Get("http://localhost:8080/")
	// time.Sleep(60 * time.Second)
	fmt.Println("将要退出")
	time.Sleep(5 * time.Second)
}
