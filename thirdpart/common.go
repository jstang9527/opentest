package thirdpart

import (
	"io/ioutil"
	"os"
	"time"

	"github.com/jstang9527/opentest/model"
	"github.com/jstang9527/opentest/utils/dbdao"
	"github.com/jstang9527/opentest/utils/tools"

	"github.com/jstang9527/opentest/conf"
	mops "github.com/jstang9527/opentest/ops"
)

var packagePath, _ = os.Getwd()

// 保存截图 ...(保存路径为服务器内文件路径, web访问路径非此路径)
func (t *TestTask) saveScreenshot(imgName string) {
	// basePath := "/root/golib/src/github.com/jstang9527/autoTest/views/frontend/"
	// imgName = basePath + "images/" + imgName + ".png"
	// web调度用下面那个
	dirPath := conf.SCREENSHOT + "/" + t.Project.ProjectID + "/"
	if bl, _ := tools.PathExists(dirPath); !bl {
		os.Mkdir(dirPath, 0666)
	}
	imgName = dirPath + imgName + ".png"
	time.Sleep(time.Second) //等1秒再截图
	if b, err := t.Wd.Screenshot(); err != nil {
		mops.Console("failed output screenshop by selenium, err: %v", err)
	} else {
		if err := ioutil.WriteFile(imgName, b, 0666); err != nil {
			mops.Console("cann't save screenshot in local, err: %v", err)
			return
		}
	}
}

// CreateItem 实例化功能项,保存截图,并插入到数据库
func (t *TestTask) createItem(name, message, screenshot string, priority, status model.Level, duration time.Duration) {
	testItem := model.TestResult{
		ProjectID:  t.Project.ProjectID,
		Name:       name,
		Message:    message,
		Screenshot: "/resources/screenshot/" + t.Project.ProjectID + "/" + screenshot + ".png", //web访问的路径,非内部路径
		Priority:   priority,
		Status:     status,
		Duration:   duration,
	}
	t.saveScreenshot(screenshot)
	dbdao.InsertRowDetail(&testItem)
}

func (t *TestTask) shutdownGo() {
	mops.Console("- goroutine shotdown 1.")
}
