package main

import (
	"fmt"

	"github.com/ThomasRooney/gexpect"
	"github.com/jstang9527/opentest/ops"
)

// Level ...
type Level int

const (
	// Pass ...
	Pass = iota + 1
	// Error ...
	Error
	// Fatal ...
	Fatal
)

func main() {
	// var ActionChain []actionchain.ActionChain
	// if err := actionchain.Init("../actionchain/acschain.json", &ActionChain); err != nil {
	// 	fmt.Println(err)
	// }
	// for _, v := range ActionChain {
	// 	fmt.Println("-->", v.FuncName)
	// 	for _, v := range v.ActionList {
	// 		fmt.Println(v)
	// 	}
	// 	fmt.Println("--------------------")
	// }
	//--------------------------------------------------------------------------------------------
	// if err := thirdpart.Init(); err != nil {
	// 	ops.Console("Error starting the ChromeDriver server: %v", err)
	// 	return
	// }
	// s, e := selenium.ParseStart("docker", "github.com/docker", "172.31.50.156")
	// fmt.Println(s, e)
	// time.Sleep(time.Second * 300)
	//--------------------------------------------------------------------------------------------
	// start := time.Now()
	// quota := 3
	// time.Sleep(time.Second * 3)
	// fmt.Println(time.Now().Sub(start) < time.Duration(quota))
	// xx := make([]string, 0, 10)
	// xx = append(xx, "as")
	// if len(xx) != 0 {
	// 	fmt.Println("len(xx)!=0 is true")
	// } else {
	// 	fmt.Println("len(xx)==0")
	// }
	// files, err := ioutil.ReadDir(`../../resources/images`)
	// if err != nil {
	// 	panic(err)
	// }
	// // 获取文件，并输出它们的名字
	// for _, file := range files {
	// 	println(file.Name())
	// }
	bash, err := gexpect.Spawn("sh")
	if err != nil {
		fmt.Printf("%v\n", err)
		return
	}
	defer bash.Close()

	bash.Expect("sh-4.2#")
	bash.SendLine("virsh snapshot-revert " + "centos75" + " --current")
	bash.Expect("sh-4.2#")
	bash.SendLine("echo abc > /root/ax.txt")
	bash.Expect("sh-4.2#")
	ops.Console("sh-4.2# execute finished. [%v]", "centos75") //xxxxxxxxxxx
}
