package es

import (
	"context"
	"fmt"
	"time"

	"github.com/jstang9527/opentest/ops"

	"github.com/jstang9527/opentest/model"
)

// TestItem ...
type TestItem struct {
	ProjectID   string        //隶属id
	ProjectName string        //项目名称
	ProjectAddr string        //项目地址
	SnapshotIP  string        //部署机器ip
	FuncName    string        //功能名
	Message     string        //测试结果
	Screenshot  string        //测试截图url
	Priority    string        //功能项重要性
	Status      string        //告警程度
	Duration    time.Duration //测试耗时
}

// InserRowData 插入测试项的
func InserRowData(item *model.Function) (err error) {
	// p1 := Person{Name: "jack", Age: 32, Married: false}
	put1, err := client.Index().Index(index).BodyJson(item).Do(context.Background())
	if err != nil {
		return
	}
	fmt.Printf("Indexed user %s to index %s, type %s\n", put1.Id, put1.Index, put1.Type)
	return
}

func statusBecomeQuota(level model.Level) string {
	switch level {
	case 1:
		return "Pass"
	case 2:
		return "Info"
	case 3:
		return "Warning"
	case 4:
		return "Error"
	case 5:
		return "Fatal"
	default:
		return "Unknown"
	}
}
func priorityBecomeQuota(level model.Level) string {
	switch level {
	case 2:
		return "Nomal"
	case 3:
		return "High"
	default:
		return "Low"
	}
}

//--------------------------------聚合上级指标------------------------------------------------

// SendToESChan 整理指定格式发给通道
func SendToESChan(project *model.Project, function *model.Function) {
	ti := TestItem{
		ProjectID:   project.ProjectID,
		ProjectName: project.ProjectName,
		ProjectAddr: project.ProjectAddr,
		SnapshotIP:  project.SnapshotIP,
		FuncName:    function.Name,
		Message:     function.Message,
		Screenshot:  function.Screenshot,
		Priority:    priorityBecomeQuota(function.Priority),
		Status:      statusBecomeQuota(function.Status),
		Duration:    function.Duration,
	}
	ch <- &ti
}

//从管道拿数据发给ES, 这个初始化就要进行了(后台进程)
func sendToES() {
	// put1, err := client.Index().Index(indexStr).Type(typeStr).BodyJson(data).Do(context.Background())
	for {
		select {
		case item := <-ch:
			put1, err := client.Index().Index(index).BodyJson(item).Do(context.Background()) //BodyJson必须为结构体
			if err != nil {
				ops.Console("failed push data to ES from channal, err: %v", err)
			}
			ops.Console("indexed %s %s to index %s, type %s, data->%v\n", item.ProjectID, put1.Id, put1.Index, put1.Type, item.Message)
		default:
			time.Sleep(time.Second)
		}
	}
}
