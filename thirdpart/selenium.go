package thirdpart

import (
	"fmt"
	"sync"
	"time"

	"github.com/jstang9527/opentest/model"
	mops "github.com/jstang9527/opentest/ops"

	"github.com/jstang9527/opentest/utils/dbdao"
	"github.com/jstang9527/opentest/utils/tools"
	"github.com/tebeka/selenium"
	"github.com/tebeka/selenium/chrome"
)

const (
	//设置常量 分别设置chromedriver.exe的地址和本地调用端口
	seleniumPath = `/root/chromedriver`
	port         = 9515
)

var (
	chromeCaps = chrome.Capabilities{
		// Prefs: imgCaps,
		Path: "",
		Args: []string{
			"--headless",
			"--start-maximized",
			"--window-size=1920x1080",
			"--no-sandbox",
			"--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36",
			"--disable-gpu",
			"--disable-impl-side-painting",
			"--disable-gpu-sandbox",
			"--disable-accelerated-2d-canvas",
			"--disable-accelerated-jpeg-decoding",
			"--test-type=ui",
			"--ignore-certificate-errors",
		},
	}
	//设置selenium服务的选项,设置为空。根据需要设置。
	ops     = []selenium.ServiceOption{}
	service *selenium.Service
	//设置浏览器兼容性，设置浏览器名称为chrome
	caps = selenium.Capabilities{"browserName": "chrome"}
)

// TestTask 测试任务结构体
type TestTask struct {
	Project *model.Project     //项目测试任务
	Wd      selenium.WebDriver //驱动，每个域仅能独享
	Host    string             // 测试主机地址
	Wg      *sync.WaitGroup
}

// NewTestTask 实例化 测试任务结构体 ...
func NewTestTask(name, addr, host string, wd selenium.WebDriver) (testTask *TestTask, err error) {
	testTask = &TestTask{
		Wd:   wd,
		Host: host,
		Project: &model.Project{
			ProjectID:   tools.CreateMd5(name + addr + time.Now().Local().String()),
			ProjectName: name,
			ProjectAddr: addr,
			SnapshotIP:  host,
		},
	}
	//实例化就插入数据到数据库
	err = dbdao.InsertRowProject(testTask.Project)
	return
}

// Init 初始化一个service后台服务
func Init() (err error) {
	//1.开启selenium服务
	service, err = selenium.NewChromeDriverService(seleniumPath, port, ops...)
	if err != nil {
		return
	}
	// defer service.Stop() 不需要关闭
	mops.Console("start the ChromeDriver server success, :%v", port)
	return
}

// createTestTask ...
func createTestTask(name, addr, host string) (testTask *TestTask, err error) {
	//1.加载自定义浏览器配置
	caps.AddChrome(chromeCaps)
	//2.将浏览器挂载到selenium driver上, 调用浏览器urlPrefix: 测试参考：DefaultURLPrefix = "http://127.0.0.1:4444/wd/hub"
	wd, err := selenium.NewRemote(caps, "http://127.0.0.1:9515/wd/hub")
	if err != nil {
		mops.Console("unable create browser, err: %v", err)
		return
	}
	err = wd.SetImplicitWaitTimeout(time.Second * 60) // 设定元素检索超时时间
	if err != nil {
		mops.Console("unable set timeout in search element, err: %v", err)
		return
	}
	//3.实例化任务对象
	return NewTestTask(name, addr, host, wd)
}

// ParseStart 调用测试立即返回任务task_id
func ParseStart(name, addr, host string) (string, error) {
	testTask, err := createTestTask(name, addr, host)
	if err != nil {
		mops.Console("unable create testTask object, err: %v", err)
		return "", nil
	}
	go testTask.executeList()
	return testTask.Project.ProjectID, nil
}

// 异步运行测试 ...
func (t *TestTask) executeList() {
	//1.每个taskProject测试完记得关闭wd(web驱动客户端)
	defer t.Wd.Quit()
	defer t.Wd.Close()

	//2.开始测试
	if err := t.Wd.Get(fmt.Sprintf("https://%v/", t.Project.SnapshotIP)); err != nil {
		mops.Console("can't open ACS index, err: %v", err)
		return
	}
	time.Sleep(time.Second * 3)
	//---------------------------------------↓↓↓要完全打开才能进行测试↓↓↓-----------------------------------------------

	//执行首页登录进去
	if err := t.checkLogin(); err != nil {
		mops.Console("Login failed, This task is no longer meaningful, stop task on this... Info: %v", err)
		return
	}

	//等登录进去拿到cookie和token后,进行并发执行剩余项测试
	// testTask.Wg.Add(2)
	t.checkNetConf()
	time.Sleep(time.Second * 3)
	t.createVM()
	// 执行剩余功能项
	// testTask.Wg.Wait()
	// //展示测试结果
	// window, _ := wd.CurrentWindowHandle()
	// if err := wd.MaximizeWindow(window); err != nil {
	// 	fmt.Println(err)
	// }
	// wd.Get("http://localhost:8080/")
	// time.Sleep(60 * time.Second)
	fmt.Println("将要退出")
	time.Sleep(5 * time.Second)

}
